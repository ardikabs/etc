#!/bin/bash

set -o pipefail

RED='\033[1;31m'
YELLOW='\033[1;33m'
GREEN='\033[1;32m'
BLUE='\033[1;34m'
LGREEN='\033[1;92m'
LYELLOW='\033[1;93m'
WHITE='\033[1;97m'
NC='\033[0m'

SSH_USERNAME=""
SSH_PORT=""
SSH_IDENTITY_FILE="-"
SSH_OPTS=""
DESTINATION_NODE=""

CLEANUP=""
PERSISTENT_MODE=no

EXIT=0

usage() {
cat <<EOF
ssh-jump is a command line tool for ssh'ing to an instance under kubernetes host private networks

Usage:
    ssh-jump [flags] TARGET_NODE

Examples:

    # Use ssh key from selected file
    ssh-jump -i ~/.ssh/id_rsa ip-10-0-10-217.ap-southeast-1.compute.internal

    # Use ssh private key from ssh-agent
    ssh-jump ip-10-0-10-217.ap-southeast-1.compute.internal

Flags:
  -h, --help          : show this message
  -u, --username      : Target SSH username. Default "centos".
  -p, --port          : Target SSH Port. Default "22".
  -i, --identity-file : Target SSH identity file.
  -o, --ssh-opts      : SSH additional flags.
  --cleanup           : Clean up ssh-jump if any. This flag is mutually exclusive with `--persistent`.
  --persistent        : Enable ssh-jump pod in persistent mode. This flag is mutually exclusive with `--cleanup`.
EOF

exit 0
}

sshpod_manifest(){
cat << EOF
apiVersion: v1
kind: Pod
metadata:
  annotations:
    ssh-jump.k8s.ardikabs.com/persistent: "${PERSISTENT_MODE}"
    ssh-jump.k8s.ardikabs.com/destination: "$DESTINATION_NODE"
    ssh-jump.k8s.ardikabs.com/ssh-username: "$SSH_USERNAME"
    ssh-jump.k8s.ardikabs.com/ssh-port: "$SSH_PORT"
    ssh-jump.k8s.ardikabs.com/ssh-identity-file: "${SSH_IDENTITY_FILE}"
  name: $1
  namespace: default
  labels:
    app: ssh-jump
    usage: jumper
spec:
  containers:
  - name: ssh-jump
    image: corbinu/ssh-server
    ports:
    - containerPort: 22
      protocol: TCP
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
  restartPolicy: Never
  tolerations:
  - operator: Exists
EOF
}

showErr(){
    errMessage=$1

    echo -e "${RED}ERROR${NC} $errMessage"
    echo -e "${YELLOW}Expected format:${NC} ${LGREEN}'ssh-jump [flags] TARGET_NODE'${NC}"
    exit 1
}

parseFlags(){

    if [[ "$#" -eq 0 ]]; then
        usage
    elif [[ ! "$1" =~ ^- && "$#" -ge 2 ]]; then
        showErr "Invalid positional arguments"
    fi

    # Parsing flags
    for arg in "$@"
    do
        skip=0
        case $arg in
            -h|--help)
            usage
            ;;
            -u=*|--username=*|-u|--username)
            if [[ "${arg#*=}" =~ ^- ]];
            then
                SSH_USERNAME="$2"
                skip=2
            else
                SSH_USERNAME="${arg#*=}"
                skip=1
            fi
            ;;
            -p=*|--port=*|-p|--port)
            if [[ "${arg#*=}" =~ ^- ]];
            then
                SSH_PORT="$2"
                skip=2
            else
                SSH_PORT="${arg#*=}"
                skip=1
            fi
            ;;
            -i=*|--identity-file=*|-i|--identity-file)
            if [[ "${arg#*=}" =~ ^- ]];
            then
                SSH_IDENTITY_FILE="-i $2"
                skip=2
            else
                SSH_IDENTITY_FILE="-i ${arg#*=}"
                skip=1
            fi
            ;;
            -o=*|--ssh-opts=*|-o|--ssh-opts)
            if [[ "${arg#*=}" =~ ^- ]];
            then
                SSH_OPTS="-i $2"
                skip=2
            else
                SSH_OPTS="-i ${arg#*=}"
                skip=1
            fi
            ;;
            --cleanup)
            CLEANUP=true
            skip=1
            ;;
            --persistent)
            PERSISTENT_MODE=yes
            skip=1
            ;;
        esac
        shift $skip
    done

    # Parsing arguments
    if [[ $# -eq 0 ]]; then
        showErr "You need to provide destination node to be ssh'ed"
    elif [[ $# -gt 1 ]]; then
        showErr "Too many arguments"
    fi

    DESTINATION_NODE=$1
    SSH_USERNAME=${SSH_USERNAME:-centos}
    SSH_PORT=${SSH_PORT:-22}
    SSH_IDENTITY_FILE=${SSH_IDENTITY_FILE}
}

terminateSSHPod(){

    kill -2 ${pid_port_forward} >/dev/null 2>&1

    if [[ -n $CLEANUP ]] && [[ ${PERSISTENT_MODE} = "no" ]]; then
        echo ""
        echo -e "Terminating pod/${POD_NAME}"
        kubectl delete pod -l app=ssh-jump,usage=jumper -n default --force --grace-period=0  2> /dev/null
        exit $EXIT
    fi
}

main(){

    parseFlags "$@"

    previous_pod_exist=$(kubectl get pod -n default -l app=ssh-jump,usage=jumper --no-headers -o custom-columns=NAME:.metadata.name 2>/dev/null | head -n1)

    if [[ -n ${previous_pod_exist} ]]; then
        POD_NAME=$previous_pod_exist

        echo "Use existing SSH jump host (${previous_pod_exist})"

    else
        MAX_POD_CREATION_TIME=10
        POD_NAME=sshjump-$(head /dev/urandom | LC_ALL=C tr -dc a-z0-9 | head -c 7 ; echo '')

        # Install a temporary SSH-server jumper
        if [[ $PERSISTENT_MODE = "yes" ]]; then
            echo "Creating persistent SSH jump host (Pod)..."
        else
            echo "Creating SSH jump host (Pod)..."
        fi

        sshpod_manifest $POD_NAME | kubectl apply -f -

        trap terminateSSHPod SIGINT SIGTERM

        # Wait until sshjump gets ready
        c=1
        while [[ ${c} -le ${MAX_POD_CREATION_TIME} ]];
        do
            pod_status=$(kubectl get pod ${POD_NAME} -n default --no-headers -ocustom-columns=STATUS:.status.phase 2>/dev/null | head -n1)
            [ "${pod_status}" = "Running" ] && break

            (( c++ ))
            sleep 1

            [[ ${c} -gt ${MAX_POD_CREATION_TIME} ]] && { echo ""; echo -e "${RED}ERROR:${NC} Timeout exceeded while creating Pod ${POD_NAME}"; EXIT=1; terminateSSHPod; }
        done
    fi

    # Setup portforward
    if [ `uname -s` = Linux ]; then
        RANDOM_PORT_FORWARDING=$(comm -23 <(seq 49152 65535 | sort) <(ss -Htan | awk '{print $4}' | cut -d':' -f2 | sort -u) | shuf | head -n 1)
    elif [ `uname -s` = Darwin ]; then
        RANDOM_PORT_FORWARDING=$(seq 49152 59152 | shuf | head -n 1)
    fi

    kubectl port-forward -n default ${POD_NAME} ${RANDOM_PORT_FORWARDING}:22 &
    pid_port_forward=$!

    sleep 5

    ssh-add -L | kubectl exec -i ${POD_NAME} -n default -- /bin/bash -c "cat > /root/.ssh/authorized_keys"

    ssh $DESTINATION_NODE $SSH_IDENTITY_FILE \
        -l ${SSH_USERNAME} -p ${SSH_PORT} \
        ${SSH_OPTS} \
        -o ForwardAgent=yes \
        -o ServerAliveInterval=60s \
        -o StrictHostKeyChecking=no \
        -o UserKnownHostsFile=/dev/null \
        -o ProxyCommand="ssh -q -W %h:%p root@127.0.0.1 -p ${RANDOM_PORT_FORWARDING}"

    terminateSSHPod
}

main "$@"
